{"version":3,"sources":["webpack:///./src/services/firebase.js","webpack:///./src/components/comments/PostContainer.js","webpack:///./src/components/comments/commentRows.js","webpack:///./src/components/comments/signin.js","webpack:///./src/components/comments/auth.js","webpack:///./src/components/comments/Post.js","webpack:///./src/components/comments/comments.js","webpack:///./src/components/blogtemplate.js"],"names":["config","apiKey","authDomain","projectId","firebase","this","store","initializeApp","firestore","auth","PostContainer","state","comments","likes","active","path","toggleComment","_this","setState","getComment","collection","doc","get","then","exists","data","set","catch","error","console","log","postComment","name","text","pictureUrl","docref","commentObj","Name","Text","Posted","Date","getTime","PictureUrl","update","FieldValue","arrayUnion","concat","Container","CommentRows","_ref","length","slice","reverse","map","comment","react_default","a","createElement","key","className","src","alt","moment","unix","Math","round","fromNow","Signin","onClick","icon","propTypes","PropTypes","func","isRequired","string","INITIAL_STATE","uid","isAnonymous","displayName","photoURL","Auth","handleSignIn","provider","signInWithPopup","GoogleAuthProvider","addScope","result","signInAnonymously","reason","Promise","reject","handleSignOut","signOut","componentDidMount","_this2","stopAuthListener","onAuthStateChanged","user","signIn","componentWillUnmount","render","isAuthed","props","children","Object","assign","React","Component","contextTypes","object","Post","unstated_es","to","postContainer","comments_auth","formik_esm","initialValues","post","recaptcha","validate","values","errors","onSubmit","setSubmitting","_ref2","touched","handleChange","handleSubmit","isSubmitting","rows","onChange","placeholder","value","style","position","type","disabled","es","sitekey","signin","_React$Component","call","PostState","inject","comments_Post","commentRows","query","Template","markdownRemark","title","frontmatter","html","date","excerpt","timeToRead","tags","layout","seo","Path","basename","replace","keywords","description","tag","dangerouslySetInnerHTML","__html","dirname","components_comments_comments","TwitterShareButton","aria-hidden","url","TwitterIcon","size","RedditShareButton","RedditIcon","FacebookShareButton","FacebookIcon","LinkedinShareButton","LinkedinIcon"],"mappings":"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","file":"component---src-components-blogtemplate-js-07cf858e0efadb80a7c7.js","sourcesContent":["import 'firebase/auth'\nimport 'firebase/firestore'\nimport firebase from 'firebase/app'\n\n\nconst config = {\n  apiKey: 'AIzaSyAvad8R_JYBxSm2xeJ7GCsHQyjRowS2_CY',\n  authDomain: 'eddayywebsite.firebaseapp.com',\n  // databaseURL: ,\n  projectId: 'eddayywebsite',\n  // storageBucket: ,\n  // messagingSenderId: ,\n}\n\nclass Firebase {\n  constructor() {\n    \n    this.store = firebase.initializeApp(config).firestore()\n    this.auth = firebase.auth\n    this.firestore = firebase.firestore\n  }\n}\n\nexport default new Firebase()\n","import { Container } from 'unstated'\nimport firebase from '../../services/firebase'\n\n\nclass PostContainer extends Container {\n  state = {\n    comments: [],\n    likes: 0,\n    active: false,\n    path: '/',\n  }\n\n  toggleComment = () => {\n    this.setState({ active: !this.state.active })\n    this.getComment(this.state.path)\n  }\n\n  getComment = () => {\n    const { store } = firebase\n    const docRef = store.collection('Blogs').doc(this.state.path)\n    //start loading gif\n    docRef\n      .get()\n      .then(doc => {\n        //end loading\n        if (doc.exists) {\n          this.setState({\n            comments: doc.data().comments,\n          })\n        } else {\n          store\n            .collection('Blogs')\n            .doc(this.state.path)\n            .set({\n              likes: 0,\n              comments: [],\n            })\n            .catch(function(error) {\n              console.error('Error adding document: ', error)\n            })\n        }\n      })\n      .catch(function(error) {\n        console.log('Error getting document:', error)\n      })\n  }\n\n  postComment = (name, text, pictureUrl) => {\n    const { store } = firebase\n    const docref = store.collection('Blogs').doc(this.state.path)\n    const commentObj = {\n      Name: name,\n      Text: text,\n      Posted: new Date().getTime(),\n      PictureUrl: pictureUrl,\n    }\n    docref\n      .update({\n        comments: firebase.firestore.FieldValue.arrayUnion(commentObj),\n      })\n      .then(() => {\n        this.setState(state => ({\n          active: true,\n          comments: [...state.comments, commentObj],\n        }))\n        //trigger event\n      })\n      .catch(function(error) {\n        console.error('Error adding document: ', error)\n      })\n  }\n}\n\nexport default PostContainer\n","import React from 'react'\nimport moment from 'moment'\n\nconst CommentRows = ({ comments }) => {\n  return comments.length > 0 ? (\n    comments\n      .slice()\n      .reverse()\n      .map(comment => {\n        const { Name } = comment\n        const { Posted } = comment\n        const { PictureUrl } = comment\n        const { Text } = comment\n        return (\n          <div key={Posted} className=\"columns is-12 is-mobile is-gapless\">\n            <div className=\"column has-text-centered is-1-tablet is-2-mobile is-horizontal-center\">\n              <figure className=\"image is-32x32\">\n                <img\n                  className=\"is-rounded\"\n                  src={PictureUrl}\n                  alt=\"Profile Pic\"\n                />\n              </figure>\n            </div>\n            <div className=\"column\">\n              <div className=\"\">\n                <div className=\"has-text-left\">\n                  {Name}\n                  {'  '}\n                  <span className=\"subtitle has-text-grey is-size-6\">\n                    posted{' '}\n                    {moment\n                      .unix(Math.round(Posted / 1000), 'YYYYMMDDHHMMSS')\n                      .fromNow()}\n                  </span>\n                </div>\n              </div>\n              <div className=\"has-text-left\">{Text}</div>\n            </div>\n          </div>\n        )\n      })\n  ) : (\n    <div className=\"has-text-grey\">No comments found. Be the first!</div>\n  )\n}\n\nexport default CommentRows\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Signin = ({ onClick, icon, text }) => {\n  return (\n    <button onClick={onClick}>\n      <span>{text}</span>\n    </button>\n  )\n}\n\nSignin.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  text: PropTypes.string.isRequired,\n}\n\nexport default Signin\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport firebase from '../../services/firebase'\n\nconst INITIAL_STATE = {\n  uid: '',\n  isAnonymous: null,\n  // // some other properties from the user object that may be useful\n  // email: '',\n  displayName: 'Anonymous User',\n  photoURL: '/defaultpic.jpg',\n}\n\nclass Auth extends React.Component {\n  static propTypes = {\n    children: PropTypes.func.isRequired,\n  }\n\n  static contextTypes = {\n    firebase: PropTypes.object,\n  }\n\n  state = INITIAL_STATE\n\n  componentDidMount() {\n    const { auth } = firebase\n    // onAuthStateChanged returns an unsubscribe method\n    this.stopAuthListener = auth().onAuthStateChanged(user => {\n      if (user) {\n        // if user exists sign-in!\n        this.signIn(user)\n      } else {\n        // otherwise sign-out!\n        this.signOut()\n      }\n    })\n  }\n\n  componentWillUnmount() {\n    this.stopAuthListener()\n  }\n\n  handleSignIn = provider => {\n    const { auth } = firebase\n\n    switch (provider) {\n      // the auth listener will handle the success cases\n      case 'google':\n        return auth()\n          .signInWithPopup(\n            new auth.GoogleAuthProvider().addScope(\n              'https://www.googleapis.com/auth/plus.login',\n            ),\n          )\n          .then(result => {\n            //var token = result.credential.accessToken;\n            //var user = result.user;\n            //console.log({user,token})\n          })\n          .catch(error => {\n            // eslint-disable-next-line no-console\n            console.error(error)\n            // TODO: notify the user of the error\n            return error\n          })\n\n      case 'anonymous':\n        return auth()\n          .signInAnonymously()\n          .catch(error => {\n            // eslint-disable-next-line no-console\n            console.error(error)\n            // TODO: notify the user of the error\n            return error\n          })\n\n      default:\n        const reason = 'Invalid provider passed to signIn method'\n        // eslint-disable-next-line no-console\n        console.error(reason)\n        return Promise.reject(reason)\n    }\n  }\n\n  handleSignOut = () => {\n    const { auth } = firebase\n\n    return auth().signOut()\n  }\n\n  signIn(user) {\n    const { uid, isAnonymous, displayName, photoURL } = user\n    this.setState({\n      uid,\n      isAnonymous,\n      displayName,\n      photoURL,\n    })\n  }\n\n  signOut() {\n    this.setState(INITIAL_STATE)\n  }\n\n  render() {\n    // If uid doesn't exist in state, the user is not signed in.\n    // A uid will exist if the user is signed in anonymously.\n    // We'll consider anonymous users as unauthed for this variable.\n    const isAuthed = !!(this.state.uid && !this.state.isAnonymous)\n\n    return this.props.children({\n      ...this.state,\n      signIn: this.handleSignIn,\n      signOut: this.handleSignOut,\n      isAuthed,\n    })\n  }\n}\n\nexport default Auth\n","import SignIn from './signin'\nimport Auth from './auth'\nimport { Subscribe } from 'unstated'\nimport PostContainer from './PostContainer'\nimport React from 'react'\nimport { Formik } from 'formik'\nimport ReCAPTCHA from 'react-google-recaptcha'\n\nconst Post = () => {\n  return (\n    <Subscribe to={[PostContainer]}>\n      {postContainer => (\n        <Auth>\n          {auth => {\n            return auth.isAuthed ? (\n              <div className=\"columns is-12 is-mobile is-gapless\">\n                <div className=\"column has-text-centered is-1-tablet is-2-mobile is-horizontal-center\">\n                  <figure className=\"image is-32x32\">\n                    <img\n                      className=\"is-rounded\"\n                      src={auth.photoURL}\n                      alt=\"Profile Pic\"\n                    />\n                  </figure>\n                </div>\n                <div className=\"column\">\n                  <Formik\n                    //setup recapcha service\n                    initialValues={{\n                      post: '',\n                      recaptcha: false,\n                    }}\n                    validate={values => {\n                      let errors = {}\n                      if (!values.post) {\n                        errors.post = 'Please enter text'\n                        values.recaptcha = false\n                      } else if (values.post.length > 500) {\n                        errors.post = 'Maximum Length 500'\n                        values.recaptcha = false\n                      }\n                      return errors\n                    }}\n                    onSubmit={(values, { setSubmitting }) => {\n                      if (values.recaptcha === false) {\n                        values.recaptcha = true\n                        setSubmitting(false)\n                        return\n                      }\n                      setSubmitting(false)\n                    }}>\n                    {({\n                      values,\n                      errors,\n                      touched,\n                      handleChange,\n                      handleSubmit,\n                      isSubmitting,\n                      /* and other goodies */\n                    }) => (\n                      <form onSubmit={handleSubmit}>\n                        <div className=\"field\">\n                          <div className=\"control\">\n                            <textarea\n                              className=\"textarea\"\n                              name=\"post\"\n                              rows=\"2\"\n                              onChange={handleChange}\n                              placeholder=\"Tell me what are you thinking\"\n                              value={values.post || ''}\n                            />\n                          </div>\n                        </div>\n                        <div\n                          className=\"control has-text-danger\"\n                          style={{ position: 'absolute' }}>\n                          {errors.post && touched.post && errors.post}\n                          {values.recaptcha && 'Please enter captcha'}\n                        </div>\n                        <div className=\"field is-grouped is-grouped-right\">\n                          <div className=\"control\">\n                            <button\n                              type=\"button\"\n                              className=\"button\"\n                              onClick={auth.signOut}>\n                              Sign out\n                            </button>\n                          </div>\n                          <div className=\"control\">\n                            <button\n                              className=\"button is-link\"\n                              type=\"submit\"\n                              disabled={isSubmitting}>\n                              Post\n                            </button>\n                          </div>\n                        </div>\n                        {values.recaptcha && (\n                          <div className=\"field is-grouped is-grouped-centered\">\n                            <div className=\"control\">\n                              <ReCAPTCHA\n                                sitekey=\"6Le8QooUAAAAAKEE3Ot7Dg1uajCl_qffzgsgAXfv\"\n                                onChange={() => {\n                                  postContainer.postComment(\n                                    auth.displayName,\n                                    values.post,\n                                    auth.photoURL,\n                                  )\n                                  values.post = ''\n                                  values.recaptcha = false\n                                }}\n                              />\n                            </div>\n                          </div>\n                        )}\n                      </form>\n                    )}\n                  </Formik>\n                </div>\n              </div>\n            ) : (\n              <div className=\"field\">\n                Please login to post a comment\n                <br />\n                <SignIn\n                  onClick={() =>\n                    auth.isAuthed ? auth.signOut() : auth.signIn('google')\n                  }\n                  text={auth.isAuthed ? 'Sign Out' : 'Sign in with Google'}\n                />\n              </div>\n            )\n          }}\n        </Auth>\n      )}\n    </Subscribe>\n  )\n}\n\nexport default Post\n","import PostState from './PostContainer'\nimport CommentRow from './commentRows'\nimport React from 'react'\nimport { Provider, Subscribe } from 'unstated'\nimport Post from './Post'\n\nclass comments extends React.Component {\n  constructor(props) {\n    super(props)\n    this.PostContainer = new PostState()\n  }\n  render() {\n    this.PostContainer.setState({ path: this.props.path })\n    return (\n      <Provider inject={[this.PostContainer]}>\n        <Subscribe to={[this.PostContainer]}>\n          {postContainer => (\n            <div className=\"has-text-centered\">\n              <div className=\"label\">Responses</div>\n              {postContainer.state.active ? (\n                <div>\n                  <Post />\n                  <CommentRow comments={postContainer.state.comments} />\n                </div>\n              ) : (\n                <button\n                  className=\"button\"\n                  onClick={postContainer.toggleComment}>\n                  Load comments\n                </button>\n              )}\n            </div>\n          )}\n        </Subscribe>\n      </Provider>\n    )\n  }\n}\n\nexport default comments\n","import React from 'react'\nimport { graphql } from 'gatsby'\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\nimport Comments from './comments/comments'\nimport '../style/bulma.scss'\nimport Path from 'path'\nimport {\n  TwitterShareButton,\n  FacebookShareButton,\n  RedditShareButton,\n  LinkedinShareButton,\n  TwitterIcon,\n  FacebookIcon,\n  RedditIcon,\n  LinkedinIcon,\n} from 'react-share'\n\nconst Template = ({ data }) => {\n  const { markdownRemark } = data\n  const { title } = markdownRemark.frontmatter\n  const { html } = markdownRemark\n  const { date } = markdownRemark.frontmatter\n  const { path } = markdownRemark.frontmatter\n  const { excerpt } = markdownRemark\n  const { timeToRead } = markdownRemark\n  const { tags } = markdownRemark.frontmatter\n  return (\n    <Layout>\n      <SEO\n        title={Path.basename(path).replace(/-/g, ' ')}\n        keywords={['gatsby', 'application', 'react', 'bulma', 'github']}\n        description={excerpt}\n      />\n      <section className=\"hero\">\n        <div className=\"container hero-body\">\n          <div className=\"columns is-centered\">\n            <div className=\"is-half-desktop is-three-fifths-tablet column\">\n              <p className=\"title\">{title}</p>\n              {date && (\n                <div className=\"subtitle columns is-6 is-multiline\">\n                  <div>\n                    <span className=\"icon is-medium has-text-danger\">\n                      <i className=\"fa fa-calendar\" />\n                    </span>\n                    {date}\n                    <span className=\"icon is-medium has-text-primary\">\n                      <i className=\"fa fa-book\" />\n                    </span>\n                    {timeToRead} min\n                  </div>\n                  <div>\n                    <span className=\"icon is-medium has-text-success\">\n                      <i className=\"fa fa-tags\" />\n                    </span>\n                    {tags.map(tag => (\n                      <span key={tag} className=\"blogtag is-light tag\">\n                        {tag}\n                      </span>\n                    ))}\n                  </div>\n                </div>\n              )}\n              <div\n                className=\"blogpost has-text-justified\"\n                dangerouslySetInnerHTML={{ __html: html }}\n              />\n              {Path.dirname(path) === '/blog' && (\n                <Comments path={Path.basename(path)} />\n              )}\n            </div>\n          </div>\n        </div>\n      </section>\n      <section className=\"hero\">\n        <div className=\"container hero-body\">\n          <div className=\"columns is-centered\">\n            <div className=\"navbar-brand\">\n              <TwitterShareButton\n                className=\"navbar-item\"\n                aria-hidden=\"true\"\n                url={`https://eddayy.github.io${path}`}\n                children={<TwitterIcon size={32} round={true} />}\n              />\n              <RedditShareButton\n                className=\"navbar-item\"\n                aria-hidden=\"true\"\n                url={`https://eddayy.github.io${path}`}\n                children={<RedditIcon size={32} round={true} />}\n              />\n              <FacebookShareButton\n                className=\"navbar-item\"\n                aria-hidden=\"true\"\n                url={`https://eddayy.github.io${path}`}\n                children={<FacebookIcon size={32} round={true} />}\n              />\n              <LinkedinShareButton\n                className=\"navbar-item\"\n                aria-hidden=\"true\"\n                url={`https://eddayy.github.io${path}`}\n                children={<LinkedinIcon size={32} round={true} />}\n              />\n            </div>\n          </div>\n        </div>\n      </section>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query($pathSlug: String!) {\n    markdownRemark(frontmatter: { path: { eq: $pathSlug } }) {\n      html\n      frontmatter {\n        path\n        title\n        date(formatString: \"DD MMMM YYYY\")\n        tags\n      }\n      excerpt(pruneLength: 150)\n      timeToRead\n    }\n  }\n`\n\nexport default Template\n"],"sourceRoot":""}